<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Csharplanguage | 独立游戏的诞生]]></title>
  <link href="http://Ariequ.github.io/blog/categories/csharplanguage/atom.xml" rel="self"/>
  <link href="http://Ariequ.github.io/"/>
  <updated>2015-11-07T19:52:29+08:00</updated>
  <id>http://Ariequ.github.io/</id>
  <author>
    <name><![CDATA[Ariequ]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Delegates Events and Actions in C#]]></title>
    <link href="http://Ariequ.github.io/blog/2014/09/19/delegate-event-action/"/>
    <updated>2014-09-19T20:01:41+08:00</updated>
    <id>http://Ariequ.github.io/blog/2014/09/19/delegate-event-action</id>
    <content type="html"><![CDATA[<ul>
<li>delegate  example</li>
</ul>


<p>使用delegate的目的是在方法中传递方法指针。通过声明delegate的方法签名，可以在运行时在符合delegate方法签名的方法中选择要执行的方法。</p>

<pre><code class="C#">using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace ModernLanguageConstructs
{
    class Program
    {
        // Part 1 - Explicit declaration of a delegate 
        //(helps a compiler ensure type safety)
        public delegate double delegateConvertTemperature(double sourceTemp);

        // A sample class to play with
        class TemperatureConverterImp
        {
            // Part 2 - Will be attached to a delegate later in the code
            public double ConvertToFahrenheit(double celsius)
            {
                return (celsius * 9.0/5.0) + 32.0;
            }

            //  Part 3 - Will be attached to a delegate later in the code
            public double ConvertToCelsius(double fahrenheit)
            {
                return (fahrenheit - 32.0) * 5.0 / 9.0;
            }
        }


        static void Main(string[] args)
        {
            //  Part 4 - Instantiate the main object
            TemperatureConverterImp obj = new TemperatureConverterImp();

            //  Part 5 - Intantiate delegate #1
            delegateConvertTemperature delConvertToFahrenheit =
                         new delegateConvertTemperature(obj.ConvertToFahrenheit);

            //  Part 6 - Intantiate delegate #2
            delegateConvertTemperature delConvertToCelsius =
                         new delegateConvertTemperature(obj.ConvertToCelsius);

            // Use delegates to accomplish work

            //  Part 7 - delegate #1
            double celsius = 0.0;
            double fahrenheit = delConvertToFahrenheit(celsius);
            string msg1 = string.Format("Celsius = {0}, Fahrenheit = {1}",
                                         celsius, fahrenheit);
            Console.WriteLine(msg1);

            //  Part 8 - delegate #2
            fahrenheit = 212.0;
            celsius = delConvertToCelsius(fahrenheit);
            string msg2 = string.Format("Celsius = {0}, Fahrenheit = {1}",
                                         celsius, fahrenheit);
            Console.WriteLine(msg2);
        }
    }
}
</code></pre>

<p><img src="/images/delegate_example_result.png"></p>

<ul>
<li>Event example<br/>
Event是一种特殊类型的delegate，使用Event可以很方便的实现观察者模式。</li>
</ul>


<pre><code class="C#">    public class SampleEventArgs
    {
        public SampleEventArgs(string s) { Text = s; }
        public String Text {get; private set;} // readonly
    }
    public class Publisher
    {
        // Declare the delegate (if using non-generic pattern).
        public delegate void SampleEventHandler(object sender, SampleEventArgs e);

        // Declare the event.
        public event SampleEventHandler SampleEvent;

        // Wrap the event in a protected virtual method
        // to enable derived classes to raise the event.
        protected virtual void RaiseSampleEvent()
        {
            // Raise the event by using the () operator.
            if (SampleEvent != null)
                SampleEvent(this, new SampleEventArgs("Hello"));
        }
    }
</code></pre>

<ul>
<li>Action example<br/>
Action是一种语法糖，它是一种不需要提前声明的delegate，使得delegate的使用更加方便，局限性就是不能定义返回值。（Func&lt;> Delegates是一种可以定义返回值的语法糖）。</li>
</ul>


<pre><code class="C#">using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace ModernLanguageConstructs
{
    class Program
    {
        static void Main(string[] args)
        {
            // Part 1 - First action that takes an int and converts it to hex
            Action&lt;int&gt; displayHex = delegate(int intValue)
            {
                Console.WriteLine(intValue.ToString("X"));
            };

            // Part 2 - Second action that takes a hex string and 
            // converts it to an int
            Action&lt;string&gt; displayInteger = delegate(string hexValue)
            {
                Console.WriteLine(int.Parse(hexValue,
                    System.Globalization.NumberStyles.HexNumber));
            };

            // Part 3 - exercise Action methods
            displayHex(16);
            displayInteger("10");
        }
    }
}
</code></pre>

<blockquote><p>参考资料：<br/>
1. <a href="http://blogs.msdn.com/b/brunoterkaly/archive/2012/03/02/c-delegates-actions-lambdas-keeping-it-super-simple.aspx">C# Delegates, Actions, Funcs, Lambdas–Keeping it super simple</a><br/>
2. <a href="http://msdn.microsoft.com/zh-cn/library/8627sbea.aspx">event（C# 参考）</a></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[行为树、状态机与条件功能函数漫谈]]></title>
    <link href="http://Ariequ.github.io/blog/2014/09/17/behaviortree-fsm-limitfunction/"/>
    <updated>2014-09-17T20:09:11+08:00</updated>
    <id>http://Ariequ.github.io/blog/2014/09/17/behaviortree-fsm-limitfunction</id>
    <content type="html"><![CDATA[<p>可能我们每天在代码过程中都会应用到行为树、状态机或者条件功能函数的某一部分，但是如果没有对对应概念的确切理解，就不能形成自己的词汇库，也就不能和别人产生心有灵犀的共鸣。这就是为什么要给词汇下定义，就是方便沟通，并且缩短沟通过程。就像我们和其他人讲述太阳的时候，不再需要向别人描述那是一个圆圆亮亮的大火球，而是简单的“太阳”两个字就能表达。</p>

<p>行为树定义了AI主体的智慧能力，这种智慧能力体现在AI主体可以根据环境变化而改变自身行为。在一棵完整的行为树中，叶子节点是AI主体所能执行的行为，而从根节点到叶子节点的路径就是AI主体的决策过程。</p>

<p>状态机描述了状态和状态转移条件。状态被动接受条件变化，通过判断确定状态的变化。</p>

<p>条件功能函数是指，在固定的触发点，通过判断预先定义的条件，如果条件满足，则执行对应的功能。这里定义的需要执行的功能，也可以是带有条件的功能组。条件功能函数也可以抽象为树形结构，判定与执行的过程就是遍历整棵树的过程。</p>
]]></content>
  </entry>
  
</feed>
